// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: StarwarsService.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Starwars {
  public static partial class StarwarsService
  {
    static readonly string __ServiceName = "Starwars.StarwarsService";

    static readonly grpc::Marshaller<global::Starwars.CharacterRequest> __Marshaller_CharacterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Starwars.CharacterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Starwars.CharacterResponse> __Marshaller_CharacterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Starwars.CharacterResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Starwars.CharacterRequest, global::Starwars.CharacterResponse> __Method_GetCharacter = new grpc::Method<global::Starwars.CharacterRequest, global::Starwars.CharacterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCharacter",
        __Marshaller_CharacterRequest,
        __Marshaller_CharacterResponse);

    static readonly grpc::Method<global::Starwars.CharacterRequest, global::Starwars.CharacterResponse> __Method_GetCharacterStream = new grpc::Method<global::Starwars.CharacterRequest, global::Starwars.CharacterResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GetCharacterStream",
        __Marshaller_CharacterRequest,
        __Marshaller_CharacterResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Starwars.StarwarsServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StarwarsService</summary>
    public abstract partial class StarwarsServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Starwars.CharacterResponse> GetCharacter(global::Starwars.CharacterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetCharacterStream(grpc::IAsyncStreamReader<global::Starwars.CharacterRequest> requestStream, grpc::IServerStreamWriter<global::Starwars.CharacterResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StarwarsService</summary>
    public partial class StarwarsServiceClient : grpc::ClientBase<StarwarsServiceClient>
    {
      /// <summary>Creates a new client for StarwarsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StarwarsServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StarwarsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StarwarsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StarwarsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StarwarsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Starwars.CharacterResponse GetCharacter(global::Starwars.CharacterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCharacter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Starwars.CharacterResponse GetCharacter(global::Starwars.CharacterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCharacter, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Starwars.CharacterResponse> GetCharacterAsync(global::Starwars.CharacterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCharacterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Starwars.CharacterResponse> GetCharacterAsync(global::Starwars.CharacterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCharacter, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Starwars.CharacterRequest, global::Starwars.CharacterResponse> GetCharacterStream(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCharacterStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Starwars.CharacterRequest, global::Starwars.CharacterResponse> GetCharacterStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetCharacterStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StarwarsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StarwarsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StarwarsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCharacter, serviceImpl.GetCharacter)
          .AddMethod(__Method_GetCharacterStream, serviceImpl.GetCharacterStream).Build();
    }

  }
}
#endregion
